*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  --cell-size: 6.5rem;
  --mark-size: calc(var(--cell-size) * 0.9);
}

body {
  margin: 0;
}

.board {
  width: 100vw;
  height: 100vh;
  /* make 3x3 */
  display: grid;
  grid-template-columns: repeat(3, auto);
  /* aligns cells */
  justify-content: center;
  align-content: center;
  /* aligns marks*/
  justify-items: center;
  align-items: center;
}

.cell {
  width: var(--cell-size);
  height: var(--cell-size);
  background-color: white;
  border: 1px solid black;
  /* display content correctly */
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

/* remove outside borders*/
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
  border-top: none;
}

.cell:nth-child(3n + 1) {
  border-left: none;
}

.cell:nth-child(3n + 3) {
  border-right: none;
}

.cell:last-child,
.cell:nth-child(7),
.cell:nth-child(8) {
  border-bottom: none;
}

/* The board can has class of x or circle
depending on whose turn it is 

The CSS below draws two narrow bars that are
positioned absolutely (so they are on top of
each other). We then rotation them by -45deg and
45deg.

We then use the same CSS properties to define
an x of a lighter cover when we hover over a 
cell with class ".board.x .cell"
*/

.cell.x::before,
.cell.x::after,
.cell.circle::before {
  background-color: black;
}

/* the next statement  must follow the settings  
   by default to x an o should be black above
   but be over written when hovering on a 
   blank cell 
*/
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before {
  background-color: lightgray;
}

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
  content: "";
  /* review next line */
  position: absolute;
  width: calc(var(--mark-size) * 0.15);
  height: var(--mark-size);
}

.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before {
  transform: rotate(-45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
  transform: rotate(45deg);
}

/* we now repeat the logic but when the board
   is in circles turn
*/

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
  content: "";
  /* review next line */
  position: absolute;
  border-radius: 50%;
}

.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before {
  width: var(--mark-size);
  height: var(--mark-size);
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after {
  width: calc(var(--mark-size) * 0.7);
  height: calc(var(--mark-size) * 0.7);
  background-color: white;
}

/* hover behaviour*/
.cell.x,
.cell.circle {
  cursor: not-allowed;
}

/* the winning-message call can be extended to add
   show. This will make the message dialogue display
   by changing the display from none to flex
*/

.winning-message {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgb(0, 0, 0, 0.9);
  justify-content: center;
  align-items: center;
  color: white;
  font-size: 5rem;
  flex-direction: column;
}

.winning-message button {
  font-size: 3rem;
  background-color: white;
  border: 1px solid black;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
}

.winning-message button:hover {
  background-color: black;
  color: white;
  border-color: white;
}

.winning-message.show {
  display: flex;
}
